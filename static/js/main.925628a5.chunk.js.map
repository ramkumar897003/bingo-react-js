{"version":3,"sources":["redux/types/bingo.js","redux/types/index.js","redux/reducers/bingo.js","redux/reducers/index.js","redux/store.js","redux/actions/bingo.js","helpers/index.js","redux/actions/index.js","pages/Home.js","App.js","reportWebVitals.js","index.js"],"names":["GET_DATA","SET_DATA","types","bingo","initialState","data","bingoReducer","state","action","type","payload","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","dispatch","arr","array","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","slice","shuffle","getData","Promise","resolve","setData","actions","connect","confettiRef","useRef","useWindowSize","width","height","useState","reward","setReward","rightDiagonal","setRightDiagonal","useEffect","checkIfCompleted","first","second","rows","rowCompleted","every","item","done","colCompleted","key","leftDiagonalCompleted","rightDiagonalCompleted","forEach","element","document","querySelector","id","classList","add","showReward","setTimeout","rowCenter","colCenter","ref","numberOfPieces","recycle","onConfettiComplete","confetti","reset","className","map","child","k","onClick","newData","handleClick","title","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.925628a5.chunk.js","sourcesContent":["export const GET_DATA = \"GET_DATA\";\nexport const SET_DATA = \"SET_DATA\";\n","import * as bingo from \"./bingo\";\n\nconst types = {\n  ...bingo,\n};\n\nexport default types;\n","import types from \"../types\";\n\nlet initialState = {\n  data: [],\n};\n\nconst bingoReducer = function (state = initialState, action) {\n  switch (action.type) {\n    case types.GET_DATA:\n      return {\n        ...state,\n        data: action.payload,\n      };\n    case types.SET_DATA:\n      return {\n        ...state,\n        data: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default bingoReducer;\n","import { combineReducers } from \"redux\";\n\nimport bingoReducer from \"../reducers/bingo\";\n\nconst rootReducer = combineReducers({\n  bingo: bingoReducer,\n});\n\nexport default rootReducer;\n","import { createStore, applyMiddleware } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\n\nimport rootReducer from \"./reducers\";\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(thunk))\n);\n\nexport default store;\n","import types from \"../types\";\nimport store from \"../store\";\n\nimport data from \"../../data/index.json\";\nimport { shuffle } from \"../../helpers\";\n\nconst { dispatch } = store;\nconst arr = [...shuffle(data)];\n\nexport function getData() {\n  return new Promise((resolve) => {\n    dispatch({\n      type: types.GET_DATA,\n      payload: arr,\n    });\n\n    return resolve(data);\n  });\n}\n\nexport function setData(payload) {\n  return new Promise((resolve) => {\n    dispatch({\n      type: types.SET_DATA,\n      payload,\n    });\n\n    return resolve(payload);\n  });\n}\n","export function shuffle(array) {\n  var currentIndex = array.length,\n    temporaryValue,\n    randomIndex;\n\n  // While there remain elements to shuffle...\n  while (0 !== currentIndex) {\n    // Pick a remaining element...\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex -= 1;\n\n    // And swap it with the current element.\n    temporaryValue = array[currentIndex];\n    array[currentIndex] = array[randomIndex];\n    array[randomIndex] = temporaryValue;\n  }\n\n  return [\n    [...array.slice(0, 5)],\n    [...array.slice(5, 10)],\n    [...array.slice(10, 15)],\n    [...array.slice(15, 20)],\n    [...array.slice(20, 25)],\n  ];\n}\n","import * as bingo from \"./bingo\";\n\nconst actions = {\n  ...bingo,\n};\n\nexport default actions;\n","import React, { useEffect, useState, useRef } from \"react\";\nimport { connect } from \"react-redux\";\nimport Ripples from \"react-ripples\";\nimport useWindowSize from \"react-use/lib/useWindowSize\";\nimport Confetti from \"react-confetti\";\n\nimport actions from \"../redux/actions\";\n\nconst Home = ({ data = [] }) => {\n  const confettiRef = useRef(null);\n  const { width, height } = useWindowSize();\n  const [reward, setReward] = useState(false); //This is used to enable/disable rewards\n  const [rightDiagonal, setRightDiagonal] = useState(false);\n\n  useEffect(() => {\n    actions.getData();\n  });\n\n  //This function is responsible to handle card click event\n  const handleClick = (first, second) => {\n    let newData = [...data];\n    newData[first][second].done = true;\n    actions.setData(newData);\n\n    checkIfCompleted(first, second);\n  };\n\n  //This function is responsible to check if row/column/diagonal elements are completed\n  const checkIfCompleted = (first, second) => {\n    const rows = data[first];\n\n    //Check if row of clicked element is completed\n    const rowCompleted = rows.every((item) => {\n      return item.done === true;\n    });\n\n    //Check if column of clicked element is completed\n    const colCompleted = rows.every((item, key) => {\n      return data[key][second].done === true;\n    });\n\n    //Check if left diagonal elements are completed\n    const leftDiagonalCompleted = data.every((item, key) => {\n      return first === second && data[key][key].done === true;\n    });\n\n    //Check if right diagonal elements are completed\n    const rightDiagonalCompleted = data.every((item, key) => {\n      return data[key][data.length - key - 1].done === true;\n    });\n\n    //Add completed class to completed row\n    if (rowCompleted) {\n      rows.forEach((element) => {\n        document\n          .querySelector(`.item-${element.id}`)\n          .classList.add(\"completed-card-wrapper\");\n      });\n    }\n\n    //Add completed class to completed column\n    if (colCompleted) {\n      rows.forEach((element, key) => {\n        document\n          .querySelector(`.item-${data[key][second].id}`)\n          .classList.add(\"completed-card-wrapper\");\n      });\n    }\n\n    //Add completed class to completed left diagonal\n    if (leftDiagonalCompleted) {\n      rows.forEach((element, key) => {\n        if (first === second) {\n          document\n            .querySelector(`.item-${data[key][key].id}`)\n            .classList.add(\"completed-card-wrapper\");\n        }\n      });\n    }\n\n    //Add completed class to completed right diagonal\n    if (rightDiagonalCompleted) {\n      rows.forEach((element, key) => {\n        document\n          .querySelector(`.item-${data[key][data.length - key - 1].id}`)\n          .classList.add(\"completed-card-wrapper\");\n      });\n    }\n\n    if (\n      rowCompleted ||\n      colCompleted ||\n      leftDiagonalCompleted ||\n      (rightDiagonalCompleted && !rightDiagonal)\n    ) {\n      showReward();\n      if (rightDiagonalCompleted && !rightDiagonal) {\n        setRightDiagonal(true);\n      }\n    }\n  };\n\n  //This function handles reward display\n  const showReward = () => {\n    setReward(true);\n    setTimeout(() => {\n      setReward(false);\n    }, 1000);\n  };\n\n  const rowCenter = Math.floor(data.length && data[0].length / 2);\n  const colCenter = Math.floor(data.length / 2);\n\n  return (\n    <div>\n      <Confetti\n        ref={confettiRef}\n        width={width}\n        height={height}\n        numberOfPieces={reward ? 1000 : 0}\n        recycle={false}\n        onConfettiComplete={(confetti) => {\n          confetti.reset();\n        }}\n      />\n      <div className=\"container\">\n        <div className=\"content\">\n          {data.map((item, key) => (\n            <div key={key} className=\"row\">\n              {item.map((child, k) => (\n                <Ripples key={child.id} onClick={() => handleClick(key, k)}>\n                  <div className={`card${child.done ? \" card-done\" : \"\"}`}>\n                    <div\n                      className={`${\n                        rowCenter === key && colCenter === k\n                          ? \"\"\n                          : \"card-wrapper\"\n                      }${\n                        rowCenter === key && colCenter === k ? \" center\" : \"\"\n                      } item-${child.id}`}\n                    >\n                      {rowCenter === key && colCenter === k ? null : (\n                        <div className=\"number\">{key * item.length + k}</div>\n                      )}\n                      <div className={child.done ? \" done\" : \"\"}>\n                        {child.title}\n                      </div>\n                    </div>\n                  </div>\n                </Ripples>\n              ))}\n            </div>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    data: state.bingo.data,\n  };\n};\n\nexport default connect(mapStateToProps)(Home);\n","import \"./App.css\";\nimport Home from \"./pages/Home\";\n\nfunction App() {\n  return <Home />;\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { Provider } from \"react-redux\";\n\nimport store from \"./redux/store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}