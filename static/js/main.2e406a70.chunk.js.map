{"version":3,"sources":["redux/types/bingo.js","redux/types/index.js","redux/reducers/bingo.js","redux/reducers/index.js","redux/store.js","redux/actions/bingo.js","helpers/index.js","redux/actions/index.js","components/Card/index.js","pages/Home.js","App.js","reportWebVitals.js","index.js"],"names":["GET_DATA","SET_DATA","types","bingo","initialState","data","bingoReducer","state","action","type","payload","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","dispatch","arr","array","length","temporaryValue","randomIndex","currentIndex","Math","floor","random","slice","shuffle","getData","Promise","resolve","setData","actions","Card","onClick","child","rowCenter","colCenter","index","k","item","empty","renderCard","className","done","id","title","data-testid","connect","confettiRef","useRef","useWindowSize","width","height","useState","reward","setReward","rightDiagonal","setRightDiagonal","leftDiagonal","setLeftDiagonal","useEffect","checkIfCompleted","first","second","rows","centerElement","rowCompleted","filter","every","colsArr","forEach","key","push","colCompleted","leftArr","leftDiagonalCompleted","rightArr","rightDiagonalCompleted","element","document","querySelector","classList","add","showReward","setTimeout","ref","gravity","numberOfPieces","recycle","onConfettiComplete","confetti","reset","map","newData","handleClick","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.2e406a70.chunk.js","sourcesContent":["export const GET_DATA = \"GET_DATA\";\nexport const SET_DATA = \"SET_DATA\";\n","import * as bingo from \"./bingo\";\n\nconst types = {\n  ...bingo,\n};\n\nexport default types;\n","import types from \"../types\";\n\nlet initialState = {\n  data: [],\n};\n\nconst bingoReducer = function (state = initialState, action) {\n  switch (action.type) {\n    case types.GET_DATA:\n      return {\n        ...state,\n        data: action.payload,\n      };\n    case types.SET_DATA:\n      return {\n        ...state,\n        data: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default bingoReducer;\n","import { combineReducers } from \"redux\";\n\nimport bingoReducer from \"../reducers/bingo\";\n\nconst rootReducer = combineReducers({\n  bingo: bingoReducer,\n});\n\nexport default rootReducer;\n","import { createStore, applyMiddleware } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\n\nimport rootReducer from \"./reducers\";\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(thunk))\n);\n\nexport default store;\n","import types from \"../types\";\nimport store from \"../store\";\n\nimport data from \"../../data/index.json\";\nimport { shuffle } from \"../../helpers\";\n\nconst { dispatch } = store;\nconst arr = [...shuffle(data)];\n\nexport function getData() {\n  return new Promise((resolve) => {\n    dispatch({\n      type: types.GET_DATA,\n      payload: arr,\n    });\n\n    return resolve(data);\n  });\n}\n\nexport function setData(payload) {\n  return new Promise((resolve) => {\n    dispatch({\n      type: types.SET_DATA,\n      payload,\n    });\n\n    return resolve(payload);\n  });\n}\n","export function shuffle(array = []) {\n  if (!array.length) {\n    return [];\n  }\n\n  var currentIndex = array.length,\n    temporaryValue,\n    randomIndex;\n\n  // While there remain elements to shuffle...\n  while (0 !== currentIndex) {\n    // Pick a remaining element...\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex -= 1;\n\n    // And swap it with the current element.\n    temporaryValue = array[currentIndex];\n    array[currentIndex] = array[randomIndex];\n    array[randomIndex] = temporaryValue;\n  }\n\n  return [\n    [...array.slice(0, 5)],\n    [...array.slice(5, 10)],\n    [...array.slice(10, 15)],\n    [...array.slice(15, 20)],\n    [...array.slice(20, 25)],\n  ];\n}\n","import * as bingo from \"./bingo\";\n\nconst actions = {\n  ...bingo,\n};\n\nexport default actions;\n","import React from \"react\";\nimport Ripples from \"react-ripples\";\n\nconst Card = ({\n  onClick,\n  child,\n  rowCenter,\n  colCenter,\n  index,\n  k,\n  item,\n  empty = false,\n}) => {\n  const renderCard = () => {\n    return (\n      <div className={`card${child.done ? \" card-done\" : \"\"}`}>\n        <div\n          className={`${\n            rowCenter === index && colCenter === k ? \"\" : \"card-wrapper\"\n          }${rowCenter === index && colCenter === k ? \" center\" : \"\"} item-${\n            child.id\n          }`}\n        >\n          {rowCenter === index && colCenter === k ? null : (\n            <div className=\"number\">{index * item.length + k}</div>\n          )}\n          <div className={child.done ? \" done\" : \"\"}>{child.title}</div>\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <>\n      {empty ? (\n        <>{renderCard()}</>\n      ) : (\n        <Ripples onClick={child.done ? () => {} : onClick} data-testid=\"card\">\n          {renderCard()}\n        </Ripples>\n      )}\n    </>\n  );\n};\n\nexport default Card;\n","import React, { useEffect, useState, useRef } from \"react\";\nimport { connect } from \"react-redux\";\nimport useWindowSize from \"react-use/lib/useWindowSize\";\nimport Confetti from \"react-confetti\";\n\nimport actions from \"../redux/actions\";\nimport Card from \"../components/Card\";\n\nconst Home = ({ data = [] }) => {\n  const confettiRef = useRef(null);\n  const { width, height } = useWindowSize();\n  const [reward, setReward] = useState(false); //This is used to enable/disable rewards\n  const [rightDiagonal, setRightDiagonal] = useState(false);\n  const [leftDiagonal, setLeftDiagonal] = useState(false);\n\n  const rowCenter = Math.floor(data.length && data[0].length / 2);\n  const colCenter = Math.floor(data.length / 2);\n\n  useEffect(() => {\n    actions.getData();\n  });\n\n  //This function is responsible to handle card click event\n  const handleClick = (first, second) => {\n    let newData = [...data];\n    newData[first][second].done = true;\n    actions.setData(newData);\n\n    checkIfCompleted(first, second);\n  };\n\n  //This function is responsible to check if row/column/diagonal elements are completed\n  const checkIfCompleted = (first, second) => {\n    const rows = data[first];\n    const centerElement = data[rowCenter][colCenter].id;\n\n    //Check if row of clicked element is completed\n    const rowCompleted = rows\n      .filter((item) => item.id !== centerElement)\n      .every((item) => {\n        return item.done === true;\n      });\n\n    //Check if column of clicked element is completed\n    const colsArr = [];\n    rows.forEach((item, key) => {\n      colsArr.push(data[key][second]);\n    });\n    const colCompleted = colsArr\n      .filter((item) => item.id !== centerElement)\n      .every((item, key) => {\n        return item.done === true;\n      });\n\n    //Check if left diagonal elements are completed\n    const leftArr = [];\n    data.forEach((item, key) => {\n      leftArr.push(data[key][key]);\n    });\n\n    const leftDiagonalCompleted = leftArr\n      .filter((item) => item.id !== centerElement)\n      .every((item, key) => {\n        return item.done === true;\n      });\n\n    //Check if right diagonal elements are completed\n    const rightArr = [];\n    data.forEach((item, key) => {\n      rightArr.push(data[key][data.length - key - 1]);\n    });\n    const rightDiagonalCompleted = rightArr\n      .filter((item) => item.id !== centerElement)\n      .every((item, key) => {\n        return item.done === true;\n      });\n\n    //Add completed class to completed row\n    if (rowCompleted) {\n      rows.forEach((element) => {\n        if (element.id !== centerElement) {\n          document\n            .querySelector(`.item-${element.id}`)\n            .classList.add(\"completed-card-wrapper\");\n        }\n      });\n    }\n\n    //Add completed class to completed column\n    if (colCompleted) {\n      rows.forEach((element, key) => {\n        if (data[key][second].id !== centerElement) {\n          document\n            .querySelector(`.item-${data[key][second].id}`)\n            .classList.add(\"completed-card-wrapper\");\n        }\n      });\n    }\n\n    //Add completed class to completed left diagonal\n    if (leftDiagonalCompleted) {\n      rows.forEach((element, key) => {\n        if (first === second && data[key][key].id !== centerElement) {\n          document\n            .querySelector(`.item-${data[key][key].id}`)\n            .classList.add(\"completed-card-wrapper\");\n        }\n      });\n    }\n\n    //Add completed class to completed right diagonal\n    if (rightDiagonalCompleted) {\n      rows.forEach((element, key) => {\n        if (data[key][data.length - key - 1].id !== centerElement) {\n          document\n            .querySelector(`.item-${data[key][data.length - key - 1].id}`)\n            .classList.add(\"completed-card-wrapper\");\n        }\n      });\n    }\n\n    if (\n      rowCompleted ||\n      colCompleted ||\n      (leftDiagonalCompleted && !leftDiagonal) ||\n      (rightDiagonalCompleted && !rightDiagonal)\n    ) {\n      showReward();\n      if (rightDiagonalCompleted && !rightDiagonal) {\n        setRightDiagonal(true);\n      }\n      if (leftDiagonalCompleted && !leftDiagonal) {\n        setLeftDiagonal(true);\n      }\n    }\n  };\n\n  //This function handles reward display\n  const showReward = () => {\n    setReward(true);\n    setTimeout(() => {\n      setReward(false);\n    }, 1000);\n  };\n\n  return (\n    <div data-testid=\"home\">\n      <Confetti\n        ref={confettiRef}\n        gravity={0.3}\n        width={width}\n        height={height}\n        numberOfPieces={reward ? 1000 : 0}\n        recycle={false}\n        onConfettiComplete={(confetti) => {\n          confetti.reset();\n        }}\n      />\n      <div className=\"container\">\n        <div className=\"content\">\n          {data.map((item, key) => (\n            <div key={key} className=\"row\">\n              {item.map((child, k) => (\n                <Card\n                  key={child.id}\n                  onClick={() => handleClick(key, k)}\n                  k={k}\n                  child={child}\n                  colCenter={colCenter}\n                  rowCenter={rowCenter}\n                  index={key}\n                  item={item}\n                  empty={rowCenter === key && colCenter === k}\n                />\n              ))}\n            </div>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    data: state.bingo.data,\n  };\n};\n\nexport default connect(mapStateToProps)(Home);\n","import \"./App.css\";\nimport Home from \"./pages/Home\";\n\nfunction App() {\n  return <Home />;\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { Provider } from \"react-redux\";\n\nimport store from \"./redux/store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}